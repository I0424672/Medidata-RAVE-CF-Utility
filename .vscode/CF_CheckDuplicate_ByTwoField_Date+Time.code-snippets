{
    "CF_codesnippets": {
        "prefix": "CF_CheckDuplicate_ByTwoField_Date+Time",
        "body": [
            "   /*",
            "    @ Classification: Query",
            "    @ Introduction: Check duplicate records with date and time.",
            "    @ Dpt_action: Dpt_action (check action) is suggested to be the std field.",
            "    @ Note: field_oid1 is the date field oid; field_oid2 is the time field oid; openQuery is used to judge if query should be fired; Query will be fired in last logline.",
            "    */",
            "",
            "    string field_oid1 = \"value_1\";",
            "    string field_oid2 = \"value_2\";",
            "    string querytext = \"A duplicate record with same field1 and field2 is present. Please update the CRF as appropriate.\";",
            "    bool openQuery = false;",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "    Records all_rds = Dpt_action.Record.DataPage.Records;",
            "",
            "    try",
            "    {",
            "        Compare_duplicate_dateandtime(field_oid1, field_oid2, querytext, all_rds, openQuery, afp);",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "public void Compare_duplicate_dateandtime(string fieldOID1, string fieldOID2, string querytext, Records allRecords, bool openQuery, ActionFunctionParams afp)",
            "{",
            "    DataPoint i_DP1 = null, i_DP2 = null;",
            "    DataPoint j_DP1 = null, j_DP2 = null;",
            "    if (allRecords != null && allRecords.Count > 1)",
            "    {",
            "        for (int i = allRecords.Count - 1; i > 1; i--)//count from the last one",
            "        {",
            "            i_DP1 = null;",
            "            i_DP2 = null;",
            "            if (allRecords[i].Active)",
            "            {",
            "                i_DP1 = allRecords[i].DataPoints.FindByFieldOID(fieldOID1);",
            "                i_DP2 = allRecords[i].DataPoints.FindByFieldOID(fieldOID2);",
            "                if (CheckDataPoint(i_DP1) && i_DP1.ChangeCount > 0 && CheckDataPoint(i_DP2) && i_DP2.ChangeCount > 0)",
            "                {",
            "                    for (int j = i - 1; j > 0 && !openQuery; j--)//count from the second last",
            "                    {",
            "                        if (allRecords[j].Active)",
            "                        {",
            "                            j_DP1 = allRecords[j].DataPoints.FindByFieldOID(fieldOID1);",
            "                            j_DP2 = allRecords[j].DataPoints.FindByFieldOID(fieldOID2);",
            "                            if (CheckDataPoint(j_DP1) && j_DP1.ChangeCount > 0 && CheckDataPoint(j_DP2) && j_DP2.ChangeCount > 0)",
            "                            {",
            "                                if ((DateTime)i_DP1.StandardValue() == (DateTime)j_DP1.StandardValue() && (TimeSpan)i_DP2.StandardValue() == (TimeSpan)j_DP2.StandardValue())",
            "                                    openQuery = true;",
            "                            }",
            "                        }",
            "                    }",
            "                }",
            "                CustomFunction.PerformQueryAction(querytext, 1, false, false, i_DP1, openQuery, afp.CheckID, afp.CheckHash);",
            "                openQuery = false;",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data != string.Empty && !dpt.IsBitSet(Status.IsNonConformant);"
        ],
        "description": "A MyCF template for: Check duplicate records - Two fields combine - Date+Time"
    }
}