{
    "CF_codesnippets": {
        "prefix": "CF_OpenQuery_MutiDatesCompare_WithUNK",
        "body": [
            "   /*",
            "    @ Classification: Query",
            "    @ Introduction: Find the max/min date.",
            "    @ Dpt_action: Dpt_action (check action) should be in the same page incluing target derived field.",
            "    @ Note: [flag] = \"Min\" or \"Max\" to find max or min value. [gle] is compare pattern. [date_field] is field OID to fetch all date in current subject.",
            "    Once meet compare condition between max/min value and [compare_field], open query on the datapoint of compare_fAield",
            "    Reminder: Copy \"CF_STD_GENERIC_PARTIAL_DATE_COMPARISON\" in library as sub CF.",
            "    */",
            "    try",
            "    {",
            "        ActionFunctionParams afp = (ActionFunctionParams) ThisObject;",
            "        DataPoint Dpt_action = afp.ActionDataPoint;",
            "        Subject current_subject = Dpt_action.Record.Subject;",
            "",
            "        string compare_field = \"DDDAT\" ;",
            "        //field in current page. when the page saved, the query will be opened/closed on it.",
            "        string date_field = \"VISDAT\";",
            "        //used to fetch all datapoints as the scope to find max/min date.",
            "        string flag = \"Max\" ;",
            "        //\"Min\" or \"Max\"",
            "        string gle = \"<\" ;",
            "        //gle == \"<\" || gle == \">\" || gle == \"<=\" || gle == \">=\" ;",
            "",
            "        string Max_query = \"Max_query < \";",
            "        string Min_query = \"Min_query < \";",
            "",
            "        bool Max_OpenQuery = false;",
            "        bool Min_OpenQuery = false;",
            "        DataPoint dpt_Target = Dpt_action.Record.DataPoints.FindByFieldOID(compare_field);",
            "        DataPoints dpt_ALLDATE = CustomFunction.FetchAllDataPointsForOIDPath(date_field, null, null, current_subject);",
            "        DataPoints All_Dates = new DataPoints();",
            "",
            "",
            "        if (dpt_ALLDATE.Count>0)",
            "        {",
            "",
            "            for (int i = 0; i < dpt_ALLDATE.Count; i++)",
            "            {",
            "",
            "                if (dpt_ALLDATE[i] != null && dpt_ALLDATE[i].Active && dpt_ALLDATE[i].Data != string.Empty && !dpt_ALLDATE[i].IsBitSet(Status.IsNonConformant))",
            "                {",
            "                    All_Dates.Add(dpt_ALLDATE[i]);",
            "                }",
            "",
            "            }",
            "        }",
            "        /* To find the latest date in the array and to set the date in the target field*/",
            "        if (All_Dates.Count > 0 && flag == \"Max\")",
            "        {",
            "",
            "            DataPoint Max_All_Dates = null;",
            "            for (int i = 0; i < All_Dates.Count; i++)",
            "            {",
            "                if (Max_All_Dates == null || (Max_All_Dates != null && (DateTime) Max_All_Dates.StandardValue() < (DateTime) All_Dates[i].StandardValue()))",
            "                Max_All_Dates = All_Dates[i];",
            "            }",
            "            if (validate(Max_All_Dates) && validate(dpt_Target) && (bool) CustomFunction.PerformCustomFunction(\"CF_STD_GENERIC_PARTIAL_DATE_COMPARISON\", current_subject.CRFVersionID, new object[] { gle, Max_All_Dates, dpt_Target } ))",
            "            {",
            "                Max_OpenQuery = true;",
            "            }",
            "            else",
            "            {",
            "                Max_OpenQuery = false;",
            "            }",
            "",
            "        }",
            "        else if(All_Dates.Count > 0 && flag == \"Min\")",
            "        {",
            "",
            "            DataPoint Min_All_Dates = null;",
            "",
            "            for (int i = 0; i < All_Dates.Count; i++)",
            "            {",
            "                if (Min_All_Dates == null || (Min_All_Dates != null && (DateTime) Min_All_Dates.StandardValue() > (DateTime) All_Dates[i].StandardValue()))",
            "                Min_All_Dates = All_Dates[i];",
            "            }",
            "            if (validate(Min_All_Dates) && validate(dpt_Target) && (bool) CustomFunction.PerformCustomFunction(\"CF_STD_GENERIC_PARTIAL_DATE_COMPARISON\", current_subject.CRFVersionID, new object[] { gle, Min_All_Dates, dpt_Target } ))",
            "            {",
            "                Min_OpenQuery = true;",
            "            }",
            "            else",
            "            {",
            "                Min_OpenQuery = false;",
            "            }",
            "        }",
            "",
            "        CustomFunction.PerformQueryAction(Max_query, 1, false, false, dpt_Target, Max_OpenQuery, afp.CheckID, afp.CheckHash);",
            "        CustomFunction.PerformQueryAction(Min_query, 1, false, false, dpt_Target, Min_OpenQuery, afp.CheckID, afp.CheckHash);",
            "",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "public bool validate(DataPoint Field)",
            "{",
            "    if (Field != null && Field.Active && Field.Data != string.Empty && !Field.IsBitSet(Status.IsNonConformant) && Field.StandardValue() is DateTime)",
            "    return true;",
            "    else",
            "    return false;"
        ],
        "description": "A MyCF template for: Date Compare - Find max/min from all date  to open query - Date with UNK"
    }
}