{
    "CF_codesnippets": {
        "prefix": "CF_InactiveFolder_UntouchedBySite",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: Inactive specific folder when the field data equals to the specific value.",
            "    @ Dpt_action: Dpt_action (check action) should be the required field",
            "    @ Note: folder_oid is the Folder OID which will be inactivated; Inactive_str is the string value which required field should be equal to",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "    string folder_oid = \"folderOID\";",
            "    string Inactive_str = \"custom value\";",
            "    bool Folder_Inactive = false;",
            "",
            "    try",
            "    {",
            "        Instance ins = current_subject.Instances.FindByFolderOID(folder_oid);",
            "        Folder_Inactive = (CheckDataPoint(Dpt_action) && (Dpt_action.Data == Inactive_str));",
            "        Inactivate_Folder(Folder_Inactive, ins);",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "public void Inactivate_Folder(bool condition, Instance ins)",
            "{",
            "    if (condition)",
            "    {",
            "        if (ins != null && !IsTouchedBySite(ins))",
            "            ins.Active = false;",
            "    }",
            "    else",
            "    {",
            "        if (ins != null && !ins.Active)",
            "            ins.Active = true;",
            "    }",
            "}",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data != string.Empty && !dpt.IsDataPointNonConformant;",
            "}",
            "//This function is used to check if instance is touched by site",
            "public bool IsTouchedBySite(Instance ins)",
            "{",
            "    bool IsFolderTouched = false;",
            "    //If the folder is touched then verify if the enterable item is indeed touched",
            "    if (ins.IsBitSet(Status.IsTouched) && ins.Active)",
            "    {",
            "        DataPages dpgs = ins.DataPages;",
            "        if (dpgs != null && dpgs.Count > 0)",
            "        {",
            "            for (int i = 0; i < dpgs.Count && !IsFolderTouched; i++)",
            "            {",
            "                DataPage dpg = dpgs[i];",
            "                if (dpg.IsBitSet(Status.IsTouched) && dpg.Active)",
            "                {",
            "                    Records recs_cur = dpg.Records;",
            "                    for (int j = 0; j < recs_cur.Count && !IsFolderTouched; j++)",
            "                    {",
            "                        DataPoints dps_cur_record = recs_cur.FindByRecordPosition(j).DataPoints;",
            "                        for (int k = 0; k < dps_cur_record.Count; k++)",
            "                        {",
            "                            if (!dps_cur_record[k].Field.RestrictViewsList.Contains(\"Investigator\") && !dps_cur_record[k].Field.RestrictEntriesList.Contains(\"Investigator\") && dps_cur_record[k].IsBitSet(Status.IsTouched))",
            "                            {",
            "                                IsFolderTouched = true;",
            "                                break;",
            "                            }",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "    return IsFolderTouched;"
        ],
        "description": "A MyCF template for: Inactive folder/forms - Inactive specific folder - When the field data equals to specfic value (considering if the data is really entered by site)."
    }
}