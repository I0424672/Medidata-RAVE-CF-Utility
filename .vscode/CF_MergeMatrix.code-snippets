{
    "CF_codesnippets": {
        "prefix": "CF_MergeMatrix",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: add requried Matrix when conditions is satisfied. The Matrix only be added one time,without any repeated form or folder.",
            "    @ Dpt_action: Dpt_action (check action) should be the required to add matrix.",
            "    @ Note: 1.FDs includes all folders define in the matrix,which using to rename folders.",
            "    2.String MatrixOID is defined the MatrixOID you want to add.",
            "    3.trig_ins,trig_form,trig_field is to define the datapoint used to judge if the matrix need to add or remove.",
            "    4.Tri_str is the condition value.",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "    int CRFVersionID = current_subject.CRFVersionID;\t\t\t",
            "    ",
            "    string MatrixOID = \"MTX_STU_MatriXOID\";",
            "    string trig_ins = \"10_FolderOID\";",
            "    string trig_form = \"DS_C_SCR_FormOID\";",
            "    string trig_field = \"DSCONT_fieldOID\";",
            "    string Tri_str = \"custom value\";",
            "    ",
            "    Instance ins_01_new = null;",
            "    ",
            "    DataPoint Dpt_trig = current_subject.Instances.FindByFolderOID(trig_ins).DataPages.FindByFormOID(trig_form).MasterRecord.DataPoints.FindByFieldOID(trig_field);",
            "    Matrix MTX_RUN = Matrix.FetchByOID(MatrixOID, current_subject.CRFVersionID);",
            "    Medidata.Core.Objects.Definitions.FolderDefinitionCollection FDs=MTX_RUN.Folders;",
            "    ",
            "    try",
            "    {        ",
            "        if(CheckDataPoint(Dpt_trig) && (Dpt_trig.Data == Tri_str))",
            "        {",
            "            current_subject.MergeMatrix(MTX_RUN);",
            "            for (int i = 0; i < FDs.Count; i++)",
            "            {",
            "                ins_01_new = current_subject.Instances.FindByFolderOID(FDs[i].OID);",
            "                if(ins_01_new.Name.Contains(\"(\"))",
            "                {",
            "                    ins_01_new.SetInstanceName(string.Empty);",
            "                }               ",
            "            }            ",
            "        }",
            "        else",
            "        {",
            "            current_subject.UnMergeMatrix(MTX_RUN);",
            "        }                ",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt.Active && dpt != null && dpt.Data != string.Empty && dpt.ChangeCount > 0 && !dpt.IsBitSet(Status.IsNonConformant);"
        ],
        "description": "A MyCF template for: Matrix - Merge Matrix - Merge Matrix"
    }
}