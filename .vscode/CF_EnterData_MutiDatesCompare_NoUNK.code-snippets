{
    "CF_codesnippets": {
        "prefix": "CF_EnterData_MutiDatesCompare_NoUNK",
        "body": [
            "   /*",
            "    @ Classification: Query",
            "    @ Introduction: Find the max/min date. ",
            "    @ Dpt_action: Dpt_action (check action) should be in the same page incluing target derived field.    ",
            "    @ Note: [flag] = \"Min\" or \"Max\" to find max or min value into [target_field] = field_OID need to drive. [date_field] is field OID to fetch all date in current subject.",
            "    */",
            "    try",
            "    {",
            "        ActionFunctionParams afp = (ActionFunctionParams) ThisObject;",
            "        DataPoint Dpt_action = afp.ActionDataPoint;",
            "        Subject current_subject = Dpt_action.Record.Subject;",
            "",
            "        string target_field = \"DDDAT\" ; //field in current page. when the page saved, the field will be derived.",
            "        string date_field = \"VISDAT\";  //used to fetch all datapoints as the scope to find max/min date. ",
            "        string flag = \"Min\" ; //\"Min\" or \"Max\"",
            "",
            "        DataPoint dpt_Target = Dpt_action.Record.DataPoints.FindByFieldOID(target_field);",
            "        DataPoints dpt_ALLDATE = CustomFunction.FetchAllDataPointsForOIDPath(date_field, null, null, current_subject);",
            "        DataPoints All_Dates = new DataPoints();",
            "",
            "        if(dpt_Target == null) return null;",
            "",
            "        if (dpt_ALLDATE.Count>0)",
            "        {",
            "",
            "            for (int i = 0; i < dpt_ALLDATE.Count; i++)",
            "            {",
            "",
            "                if (dpt_ALLDATE[i] != null && dpt_ALLDATE[i].Active && dpt_ALLDATE[i].Data != string.Empty && !dpt_ALLDATE[i].IsBitSet(Status.IsNonConformant))",
            "                {",
            "",
            "                    All_Dates.Add(dpt_ALLDATE[i]);",
            "                }",
            "",
            "            }",
            "        }",
            "        /* To find the latest date in the array and to set the date in the target field*/",
            "        if (All_Dates.Count > 0 && flag == \"Max\")",
            "        {",
            "            DataPoint Max_All_Dates = null;",
            "",
            "            for (int i = 0; i < All_Dates.Count; i++)",
            "            {",
            "                if (Max_All_Dates == null || (Max_All_Dates != null && (DateTime) Max_All_Dates.StandardValue() < (DateTime) All_Dates[i].StandardValue()))",
            "                Max_All_Dates = All_Dates[i];",
            "            }",
            "            if (Max_All_Dates != null && Max_All_Dates.Active && Max_All_Dates.Data != string.Empty && !Max_All_Dates.IsBitSet(Status.IsNonConformant))",
            "            {",
            "                if (Max_All_Dates.Data != dpt_Target.Data)",
            "                {",
            "                    dpt_Target.UnFreeze();",
            "                    dpt_Target.Enter(Max_All_Dates.Data, string.Empty, 0);",
            "                    dpt_Target.Freeze();",
            "                }",
            "            }",
            "            else",
            "            {",
            "                dpt_Target.UnFreeze();",
            "                dpt_Target.Enter(string.Empty, string.Empty, 0);",
            "                dpt_Target.Freeze();",
            "            }",
            "        }",
            "        else if(All_Dates.Count > 0 && flag == \"Min\")",
            "        {",
            "",
            "            DataPoint Min_All_Dates = null;",
            "",
            "            for (int i = 0; i < All_Dates.Count; i++)",
            "            {",
            "                if (Min_All_Dates == null || (Min_All_Dates != null && (DateTime) Min_All_Dates.StandardValue() > (DateTime) All_Dates[i].StandardValue()))",
            "                Min_All_Dates = All_Dates[i];",
            "            }",
            "            if (Min_All_Dates != null && Min_All_Dates.Active && Min_All_Dates.Data != string.Empty && !Min_All_Dates.IsBitSet(Status.IsNonConformant))",
            "            {",
            "                if (Min_All_Dates.Data != dpt_Target.Data)",
            "                {",
            "                    dpt_Target.UnFreeze();",
            "                    dpt_Target.Enter(Min_All_Dates.Data, string.Empty, 0);",
            "                    dpt_Target.Freeze();",
            "                }",
            "            }",
            "            else",
            "            {",
            "                dpt_Target.UnFreeze();",
            "                dpt_Target.Enter(string.Empty, string.Empty, 0);",
            "                dpt_Target.Freeze();",
            "            }",
            "",
            "        }",
            "        else",
            "        {",
            "            if (string.Compare(dpt_Target.Data.Trim(), string.Empty, true) != 0)",
            "            {",
            "                dpt_Target.UnFreeze();",
            "                dpt_Target.Enter(string.Empty, string.Empty, 0);",
            "                dpt_Target.Freeze();",
            "            }",
            "        }",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;"
        ],
        "description": "A MyCF template for: Date Compare - Find max/min from all date  to enter data - Date without UNK"
    }
}