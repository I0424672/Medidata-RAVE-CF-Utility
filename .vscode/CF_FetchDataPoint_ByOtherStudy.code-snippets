{
    "CF_codesnippets": {
        "prefix": "CF_FetchDataPoint_ByOtherStudy",
        "body": [
            "   /*",
            "    @ Classification: Derivation",
            "    @ Introduction: Fetch data from another study",
            "    @ Dpt_action: Dpt_action (check action) should be the field in current study",
            "    @ Note: This function is normally used to derive a data from source subect to target subject",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject cur_subj = Dpt_action.Record.Subject;",
            "    //Define the source study information here",
            "    string studyName = \"StudyName\";",
            "    string fdOID_source = \"fdOID_source\";",
            "    string fmOID_source = \"fmOID_source\";",
            "",
            "    string fdOID_target = \"fdOID_target\";",
            "    string fmOID_target = \"fmOID_target\";",
            "    try",
            "    {",
            "        string subjName = cur_subj.Name;",
            "",
            "        var study = GetStudy(studyName, cur_subj.StudySite.Study.Environment, Dpt_action.Interaction);",
            "        var subject = GetSubject(study, subjName);",
            "",
            "        if (subject != null)",
            "        {",
            "            // Belows are the function to copy the whole form from source to target (just for reference)",
            "            CopyForm(subject, fdOID_source, fmOID_source, Dpt_action.Record.Subject, fdOID_target, fmOID_target);",
            "        }",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "",
            "// Function to fetch the source study",
            "public Study GetStudy(string name, string env, Interaction interaction)",
            "{",
            "    if (string.IsNullOrEmpty(name))",
            "        return null;",
            "    var studies = Studies.GetAllStudies(interaction);",
            "    for (int i = 0; i < studies.Count; i++)",
            "    {",
            "        if (studies[i].Name.ToUpper() == name.ToUpper() && studies[i].Environment.ToUpper() == env.ToUpper())",
            "            return studies[i];",
            "    }",
            "    return null;",
            "}",
            "",
            "// Function to fetch the source subject",
            "public Subject GetSubject(Study study, string subjName)",
            "{",
            "    if (study != null)",
            "    {",
            "        for (int i = 0; i < study.StudySites.Count; i++)",
            "        {",
            "            var subs = study.StudySites[i].Subjects;",
            "            var sub = subs.FindBySubjectName(subjName);",
            "            if (sub != null)",
            "                return sub;",
            "        }",
            "    }",
            "    return null;",
            "}",
            "",
            "// Function to copy form information from source to current form",
            "public void CopyForm(Subject subjSource, string FolderOIDSource, string formOIDSource, Subject subjDest, string FolderOIDDest, string formOIDDest)",
            "{",
            "    var folderSource = subjSource.Instances.FindByFolderOID(FolderOIDSource);",
            "    if (folderSource != null)",
            "    {",
            "        var formSource = folderSource.DataPages.FindByFormOID(formOIDSource);",
            "        //check what's data should be copied from parent study",
            "        Hashtable CMIDs_source = new Hashtable();",
            "        Hashtable CMIDs_dest = new Hashtable();",
            "        string fldOID = \"FieldOID\";",
            "",
            "        if (formSource != null && formSource.Active)",
            "        {",
            "            Records rcds = formSource.Records;",
            "            for (int i = 1; i < rcds.Count; i++)",
            "            {",
            "                Record rcd = rcds.FindByRecordPosition(i);",
            "                if (rcd.DataPoints.FindByFieldOID(fldOID).Data != \"\")",
            "                    CMIDs_source.Add(rcd.DataPoints.FindByFieldOID(fldOID).Data, i);",
            "            }",
            "        }",
            "        DataPage formDest = null;",
            "        Instance folderDest = null;",
            "        folderDest = subjDest.Instances.FindByFolderOID(FolderOIDDest);",
            "        if (folderDest != null)",
            "            formDest = folderDest.DataPages.FindByFormOID(formOIDDest);",
            "",
            "        if (formDest != null)",
            "        {",
            "            Records rcds = formDest.Records;",
            "            for (int i = 1; i < rcds.Count; i++)",
            "            {",
            "                Record rcd = rcds.FindByRecordPosition(i);",
            "                DataPoint dpt = rcd.DataPoints.FindByFieldOID(fldOID);",
            "                if (dpt.Data != string.Empty)",
            "                    CMIDs_dest[dpt.Data] = i;",
            "            }",
            "        }",
            "",
            "        if (CMIDs_source.Count > 0)",
            "        {",
            "            ArrayList IDs_al = new ArrayList(CMIDs_source.Keys);",
            "            IDs_al.Sort();",
            "            if (formDest == null)",
            "            {",
            "                Form fm = Form.FetchByOID(formOIDDest, subjDest.CrfVersionId);",
            "                formDest = folderDest.AddCRF(fm, folderDest.SubjectMatrixID);",
            "            }",
            "            if (formDest != null)",
            "            {",
            "                //for logline",
            "                foreach (string CMSPID in IDs_al)",
            "                {",
            "                    int pos_source = (int)CMIDs_source[CMSPID];",
            "                    int pos_dest = -1;",
            "",
            "                    if (CMIDs_dest[CMSPID] != null)",
            "                    {",
            "                        pos_dest = (int)CMIDs_dest[CMSPID];",
            "                    }",
            "                    if (CMIDs_dest[CMSPID] == null)",
            "                    {",
            "                        pos_dest = formDest.Records.FindByRecordPosition(1).DataPoints.FindByFieldOID(fldOID).Data == string.Empty ? 1 : int.MaxValue;",
            "                    }",
            "",
            "                    Record recordSource = formSource.Records.FindByRecordPosition(pos_source);",
            "                    Record recordDest = formDest.Records.FindByRecordPosition(pos_dest);",
            "",
            "                    if (recordDest == null)",
            "                        recordDest = formDest.AddLogRecord();",
            "                    record_copy(recordSource, recordDest);",
            "",
            "                }",
            "            }",
            "        }",
            "",
            "        //for master record",
            "        if (formSource != null && formDest != null)",
            "            record_copy(formSource.MasterRecord, formDest.MasterRecord);",
            "        if (CMIDs_dest.Count > 0)",
            "        {",
            "            foreach (string cmspid in CMIDs_dest.Keys)",
            "            {",
            "                if (CMIDs_source[cmspid] == null)",
            "                {",
            "                    Record rcd = formDest.Records.FindByRecordPosition((int)CMIDs_dest[cmspid]);",
            "                    if (rcd.Active) rcd.Active = false;",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            "public void record_copy(Record recordSource, Record recordDest)",
            "{",
            "    string[] fldOID_def =",
            "    {",
            "        \"FIELD\"",
            "    }",
            "    ;",
            "    string[] defvals =",
            "    {",
            "        \"VALUE\"",
            "    }",
            "    ;",
            "    if (recordDest != null && !recordDest.Active) recordDest.Active = true;",
            "    if (recordDest != null)",
            "        recordDest.Unlock();",
            "",
            "    for (int j = 0; j < recordSource.DataPoints.Count; j++)",
            "    {",
            "        var dpSource = recordSource.DataPoints[j];",
            "        var dpDest = recordDest.DataPoints.FindByFieldOID(dpSource.Field.OID);",
            "        if (dpDest != null)",
            "        {",
            "",
            "            int idx = Array.IndexOf(fldOID_def, dpDest.Field.OID);",
            "            if (idx >= 0)",
            "            {",
            "                dpDest.Enter(defvals[idx], \"\", 0);",
            "            }",
            "            else",
            "                dpDest.Enter(dpSource.Data, \"\", 0);",
            "",
            "            if (!dpDest.Field.RestrictEntriesList.Contains(\"Investigator\") && recordDest.RecordPosition == 0)",
            "                dpDest.Lock();",
            "        }",
            "    }",
            "",
            "    if (recordDest.Active != recordSource.Active)",
            "        recordDest.Active = recordSource.Active;",
            "    if (recordDest != null && recordDest.RecordPosition != 0) recordDest.Lock();"
        ],
        "description": "A MyCF template for: Fetch DataPoint - Fetch DataPoint from other study - Based on field OID"
    }
}