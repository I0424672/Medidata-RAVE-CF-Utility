{
    "CF_codesnippets": {
        "prefix": "CF_Invisible_LoglineField",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: make required logline field to be invisble if visible once condition is satisfied ",
            "    @ Dpt_action: Dpt_action (check action) should be a std field in the required page (where the logline field in located)",
            "    @ Note: Tri_str is the string value which required standard field should be equal to; dp_tovisbile is the OID of required logline field",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Records rds = Dpt_action.Record.DataPage.Records;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "",
            "    string Tri_str = \"custom value\";",
            "    string dp_tovisbile = \"field_OID\";",
            "",
            "    try",
            "    {",
            "        if (CheckDataPoint(Dpt_action))",
            "        {",
            "            if (Dpt_action.Data == Tri_str)",
            "            {",
            "                for (int i = 0; i < rds.Count; i++)",
            "                {",
            "                    DataPoint log_dp = rds[i].DataPoints.FindByFieldOID(dp_tovisbile);",
            "                    if (IsVisible(log_dp))",
            "                    {",
            "                        log_dp.IsVisible = false;",
            "                    }",
            "                }",
            "            }",
            "            else",
            "                re_visible(Dpt_action, dp_tovisbile);",
            "        }",
            "        else",
            "            re_visible(Dpt_action, dp_tovisbile);",
            "    }",
            "    catch",
            "    {",
            "    }",
            "    return null;",
            "}",
            "",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data != string.Empty && dpt.ChangeCount > 0 && !dpt.IsBitSet(Status.IsNonConformant);",
            "}",
            "",
            "public bool IsVisible(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data == string.Empty && dpt.IsVisible;",
            "}",
            "",
            "public void re_visible(DataPoint dp, string str_dp)",
            "{",
            "    Records rds = dp.Record.DataPage.Records;",
            "    for (int i = 0; i < rds.Count; i++)",
            "    {",
            "        DataPoint log_dp = rds[i].DataPoints.FindByFieldOID(str_dp);",
            "        if (!log_dp.IsVisible)",
            "        {",
            "            log_dp.IsVisible = true;",
            "        }",
            "    }"
        ],
        "description": "A MyCF template for: Field Invisible - Logline - Visible to Invisible"
    }
}