{
    "CF_codesnippets": {
        "prefix": "CF_Calendar_CFUsedInMTX_ByDefaultInArchit",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: A piece of calendar settings code to put into MTX codes",
            "    @ Dpt_action: Dpt_action (check action) should be the field which required to trigger martix",
            "    @ Note: must delete redudent variables (which has already been claimed by MTX code) and try catch format;",
            "    FolderOIDs should list a series of folders OID to set calendar;",
            "    baseline_f should be the OID of folder which be used to foward;",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "    Matrix MTX_FUP = Matrix.FetchByOID(\"CUSTOM\", current_subject.CRFVersionID);",
            "    string VISDAT_OID = \"VISDAT\";",
            "    string VIS_PAGE_OID = \"SV_01\";",
            "    string[] FolderOIDs = { \"V02\", \"V03\", \"V04\", \"V05\", \"V06\", \"V07\" };",
            "    DataPoint VIS_dpt = null;",
            "    try",
            "    {",
            "        if (CheckDataPoint(Dpt_action) && Dpt_action.Data == \"Y\")",
            "        {",
            "            current_subject.MergeMatrix(MTX_FUP);",
            "        }",
            "        VIS_dpt = Dpt_action.Record.Instance.DataPages.FindByFormOID(VIS_PAGE_OID).MasterRecord.DataPoints.FindByFieldOID(VISDAT_OID);",
            "        if (CheckDataPoint(VIS_dpt))",
            "        SetTimeForward1(current_subject, VIS_dpt, FolderOIDs, VISDAT_OID);",
            "    }",
            "    catch { }",
            "    return null;",
            "}",
            "",
            "public void SetTimeForward1(Subject cur_subj, DataPoint VIS_dpt, string[] folders, string VISDAT_OID)",
            "{",
            "    Instance ins_b = null;",
            "    if (CheckDataPoint(VIS_dpt))",
            "    {",
            "        ins_b = VIS_dpt.Record.Instance;",
            "        ins_b.SetTimeForward(Convert.ToDateTime(VIS_dpt.StandardValue()).AddDays(-(ins_b.Folder.TargetDays)), 0);",
            "        for (int i = 0; i < folders.Length; i++)",
            "        {",
            "            Instance ins = cur_subj.Instances.FindByFolderOID(folders[i]);",
            "            if (ins != null && ins.Active)",
            "            {",
            "                ins.SetTimeForward(Convert.ToDateTime(VIS_dpt.StandardValue()).AddDays(-(ins_b.Folder.TargetDays)), 0);",
            "            }",
            "        }",
            "    }",
            "}",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data != string.Empty && !dpt.IsDataPointNonConformant;"
        ],
        "description": "A MyCF template for: Calendar - Combined with Matrix - Based on  both folder's target days in architect"
    }
}