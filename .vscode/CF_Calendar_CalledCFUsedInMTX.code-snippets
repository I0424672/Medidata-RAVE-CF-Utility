{
    "CF_codesnippets": {
        "prefix": "CF_Calendar_CalledCFUsedInMTX",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: Set time zero or forward for added instance",
            "    @ Note: This is a called CF, used in mtx or visit.",
            "    * ",
            "    * @Case 1: Called in the visit, set calendar for following folders.",
            "    * @Useage: CustomFunction.PerformCustomFunction(\"CALLED_CF\", sbj.CRFVersionID, new object[] {sbj, Dpt_action.Record.instance, false})",
            "    * @Dpt_action is visdat in the visit",
            "    * ",
            "    * @Case 2: Called in the mtx, set calendar for triggered folders          ",
            "    * @Useage: CustomFunction.PerformCustomFunction(\"CALLED_CF\", sbj.CRFVersionID, new object[] {sbj, cur_ins, true})",
            "    * @Use loop to find each triggered instance 'cur_ins' and call this CF. ",
            "    */",
            "    try",
            "    {",
            "        object[] parameters = (object[])ThisObject;               ",
            "        Subject cur_sbj = (Subject)parameters[0];",
            "        Instance cur_ins = (Instance)parameters[1];",
            "        bool bl_In_MTX = (bool)parameters[2];",
            "        //if it is called in Mtrix CF,bl_In_MTX=true ",
            "",
            "        string cur_fdOid = cur_ins.Folder.OID;",
            "        //Specify the folder which could set calendar",
            "        string[] fdOids_calendar =",
            "        {",
            "            \"00\", \"10\", \"100\"",
            "        }",
            "        ;",
            "        //Specify all folders",
            "        string[] fdOids_All =",
            "        {",
            "            \"00\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\"",
            "        }",
            "        ;",
            "        string fmOid = \"SV_01\", fldOid = \"VISDAT\";",
            "",
            "        //if the instance is not the instance which can settime zero/forward and the current instance is not transfered while matrix is merged, no action needs to be done.",
            "        if (Array.IndexOf(fdOids_calendar, cur_ins.Folder.OID) < 0 && !bl_In_MTX)",
            "            return null;",
            "",
            "        //Find the base instance to set calendar",
            "        DataPoint dpt_base = null;",
            "        Instance ins_base = null;",
            "",
            "        for (int i = Array.IndexOf(fdOids_All, cur_fdOid); i >= 0; i--)",
            "        {",
            "            string fdOid = fdOids_All[i];",
            "            if (Array.IndexOf(fdOids_calendar, fdOid) >= 0)",
            "            {",
            "                Instance ins = cur_sbj.Instances.FindByFolderOID(fdOids_All[i]);",
            "                if (ins != null)",
            "                {",
            "                    DataPage dpg = ins.DataPages.FindByFormOID(fmOid);",
            "                    if (dpg != null && dpg.Active)",
            "                    {",
            "                        DataPoint dpt = dpg.MasterRecord.DataPoints.FindByFieldOID(fldOid);",
            "                        if (DptIsValidate(dpt))",
            "                        {",
            "                            ins_base = ins;",
            "                            dpt_base = dpt;",
            "                            break;",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        //ins_base == null means there is no instance which could set calendar",
            "        if (ins_base == null)",
            "            return null;",
            "",
            "        bool bl_SetZero = false;",
            "        if (Array.IndexOf(fdOids_calendar, ins_base.Folder.OID) == 0)",
            "            bl_SetZero = true;",
            "",
            "        DateTime dt_calendar = Convert.ToDateTime(dpt_base.Data);",
            "",
            "        //if called in matrix, we don't need to set calendar for instances below current instance, just set calendar for current instance",
            "        //if called in the visit date of the instance which can reset other instances' calendar, we need to loop the following instances.",
            "        if (bl_In_MTX)",
            "        {",
            "            if (bl_SetZero)",
            "            {",
            "                cur_ins.SetTimeZero(dt_calendar);",
            "            }",
            "            else",
            "            {",
            "                cur_ins.SetTimeForward(dt_calendar.AddDays(-ins_base.Folder.TargetDays), 0);",
            "            }",
            "",
            "        }",
            "        else",
            "        {",
            "            //find the end of instance to set calendar according to the dpt_base",
            "            string fdOid_end_calendar = string.Empty;",
            "            int startIndex = Array.IndexOf(fdOids_calendar, ins_base.Folder.OID);",
            "            int endIndex = fdOids_All.Length;",
            "            for (int i = startIndex + 1; i < fdOids_calendar.Length; i++)",
            "            {",
            "                Instance ins = cur_sbj.Instances.FindByFolderOID(fdOids_calendar[i]);",
            "                if (ins != null)",
            "                {",
            "                    DataPage dpg = ins.DataPages.FindByFormOID(fmOid);",
            "                    if (dpg != null && dpg.Active)",
            "                    {",
            "                        DataPoint dpt = dpg.MasterRecord.DataPoints.FindByFieldOID(fldOid);",
            "                        if (DptIsValidate(dpt))",
            "                        {",
            "                            fdOid_end_calendar = fdOids_calendar[i];",
            "                            break;",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "            if (fdOid_end_calendar != string.Empty)",
            "                endIndex = Array.IndexOf(fdOids_All, fdOid_end_calendar);",
            "",
            "            //loop all instances needs to be set calendar and reset their calendar",
            "            for (int i = startIndex; i < endIndex; i++)",
            "            {",
            "                Instance ins = cur_sbj.Instances.FindByFolderOID(fdOids_All[i]);",
            "                if (ins == null)",
            "                    break;",
            "",
            "                if (bl_SetZero)",
            "                {",
            "                    ins.SetTimeZero(dt_calendar);",
            "                }",
            "                else",
            "                {",
            "                    ins.SetTimeForward(dt_calendar.AddDays(-ins_base.Folder.TargetDays), 0);",
            "                }",
            "            }",
            "",
            "        }",
            "    }",
            "    catch",
            "    {",
            "",
            "    }",
            "    return null;",
            "}",
            "",
            "bool DptIsValidate(DataPoint dpt)",
            "{",
            "    if (dpt != null && dpt.Active && dpt.Data != string.Empty && !dpt.IsDataPointNonConformant)",
            "        return true;",
            "    return false;"
        ],
        "description": "A MyCF template for: Calendar - SetTimeZero & SetTimeForward - Called in Matrix or in the CF triggered by the visit date"
    }
}