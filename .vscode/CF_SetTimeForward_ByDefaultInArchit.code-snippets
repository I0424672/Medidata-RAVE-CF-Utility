{
    "CF_codesnippets": {
        "prefix": "CF_SetTimeForward_ByDefaultInArchit",
        "body": [
            "   /*",
            "    @ Classification: Dynamism",
            "    @ Introduction: Set time forward based on both architect settings",
            "    @ Dpt_action: Dpt_action (check action) should be VISDAT with wild cast",
            "    @ Note: FolderOIDs should list a series of folders OID to set calendar;",
            "    In this function, when a Date has been changed, if one of its following visits has been entered, the calendar will not be set",
            "    */",
            "",
            "    ActionFunctionParams afp = (ActionFunctionParams)ThisObject;",
            "    DataPoint Dpt_action = afp.ActionDataPoint;",
            "    Subject current_subject = Dpt_action.Record.Subject;",
            "    bool flag = true;",
            "    int position;",
            "    string VISDAT_OID = \"VISDAT\";",
            "    string VIS_PAGE_OID = \"SV_01\";",
            "    string[] FolderOIDs = { \"V02\", \"V03\", \"V04\", \"V05\", \"V06\", \"V07\" };",
            "",
            "    try",
            "    {",
            "        if (CheckDataPoint(Dpt_action))",
            "        {",
            "            position = Array.IndexOf(FolderOIDs, Dpt_action.Record.Instance.Folder.OID);",
            "",
            "            for (int i = position + 1; i < FolderOIDs.Length; i++)",
            "            {",
            "                DataPoint VIS_dpt = current_subject.Instances.FindByFolderOID(FolderOIDs[i]).DataPages.FindByFormOID(VIS_PAGE_OID).MasterRecord.DataPoints.FindByFieldOID(VISDAT_OID);",
            "                if (CheckDataPoint(VIS_dpt))",
            "                {",
            "                    flag = false;",
            "                    break;",
            "                }",
            "            }",
            "            SetTimeForward(flag, Dpt_action, FolderOIDs, current_subject, position);",
            "        }",
            "    }",
            "    catch { }",
            "    return null;",
            "}",
            "",
            "public void SetTimeForward(bool flag, DataPoint Base_dpt, string[] folders, Subject cur_subj, int position)",
            "{",
            "    if (flag)",
            "    {",
            "            for (int i = position ; i < folders.Length; i++)",
            "                if (cur_subj.Instances.FindByFolderOID(folders[i]) != null)",
            "                {",
            "                    cur_subj.Instances.FindByFolderOID(folders[i]).SetTimeForward(Convert.ToDateTime(Base_dpt.StandardValue()).AddDays(-Base_dpt.Record.Instance.Folder.TargetDays), 0);",
            "                }",
            "    }",
            "}",
            "public bool CheckDataPoint(DataPoint dpt)",
            "{",
            "    return dpt != null && dpt.Active && dpt.Data != string.Empty && !dpt.IsDataPointNonConformant;"
        ],
        "description": "A MyCF template for: Calendar - SetTimeForward - Based on  both folder's target days in architect"
    }
}