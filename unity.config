<?xml version="1.0" encoding="utf-8" ?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <container>
    <!-- Localization -->
    <register type="Medidata.Interfaces.Localization.ILocalization, Medidata.Interfaces"
        mapTo="Medidata.Core.Adapters.LocalizationAdapter, Medidata.Core.Adapters" />

    <register type="Medidata.Core.Objects.Interfaces.ILocalizedDataStringCacheManager, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.LocalizedDataStringCacheManager, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.ILocalizedStringCacheManager, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.LocalizedStringCacheManager, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <!-- Balance -->
    <register type="Medidata.Interfaces.Balance.IBalanceReplaceKitService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.WebService.BalanceReplaceKitService, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IBalanceAppFetcher, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.BalanceAppFetcher, Medidata.Core.Objects" />
		
    <register type="Medidata.Interfaces.Balance.IBalanceDataJsonParser, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.BalanceDataJsonParser, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IOidPathsManager, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.OidPathsManager, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IInventoryService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.InventoryService, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.ITitrationService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.TitrationService, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IResponseParser, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.ResponseParser, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IBalanceSubjectService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.BalanceSubjectService, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IDoser, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.Doser, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IConfigurationHelper, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.ConfigurationHelper, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Adapters.ICheckService, Medidata.Interfaces"
       mapTo="Medidata.Core.Objects.Adapters.CheckAdapter, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IBalanceLoggingHelper, Medidata.Interfaces"
       mapTo="Medidata.Core.Objects.Balance.BalanceLoggingHelper, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IBalanceIntegrationService, Medidata.Interfaces"
       mapTo="Medidata.Core.Objects.Balance.BalanceIntegrationService, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Adapters.IDataFormatService, Medidata.Interfaces"
       mapTo="Medidata.Core.Objects.Adapters.DataFormatAdapter, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IPostWebServiceRequester, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.WebService.PostWebServiceRequester, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IWebServiceRequester, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.WebService.WebServiceRequester, Medidata.Core.Objects" />

    <register type="Medidata.Interfaces.Balance.IBalanceKitStorageService, Medidata.Interfaces"
         mapTo="Medidata.Core.Objects.Balance.BalanceKitStorageService, Medidata.Core.Objects" />

    <register type="Medidata.Data.IAgent, Medidata.Data"
                 mapTo="Medidata.Data.Adapters.AgentAdapter, Medidata.Data">
      <lifetime type="singleton" />
    </register>
    
    <register type="Medidata.Interfaces.Balance.eDA.Services.IDispensationAccountabilityService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.eDA.DispensationAccountabilityService, Medidata.Core.Objects" >
            <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Balance.eDA.Services.IDispensationAccountabilityTransformEngine, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.eDA.DispensationAccountabilityTransformEngine, Medidata.Core.Objects" >
            <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Balance.eDA.Services.IBalanceRepository, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.eDA.BalanceRepository, Medidata.Core.Objects" >
            <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Balance.eDA.Services.IRaveRepository, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Balance.eDA.RaveRepository, Medidata.Core.Objects" >
            <lifetime type="singleton" />
    </register>

    <!-- BulkStatusUpdate -->
    <register type="Medidata.Interfaces.AsyncProcessing.IBulkStatusUpdateAction, Medidata.Interfaces"
                 mapTo="Medidata.Core.AsyncProcessing.BulkStatusUpdateAction, Medidata.Core.AsyncProcessing">
      <lifetime type="singleton" />
    </register>
    <register type="Medidata.Interfaces.AsyncProcessing.IBulkStatusUpdateQueueManager, Medidata.Interfaces"
                 mapTo="Medidata.Core.AsyncProcessing.BulkStatusUpdateQueueManager, Medidata.Core.AsyncProcessing">
      <lifetime type="singleton" />
    </register>
    <register type="Medidata.Interfaces.AsyncProcessing.IBulkStatusUpdateQueueTaskItem, Medidata.Interfaces"
                 mapTo="Medidata.Core.AsyncProcessing.BulkStatusUpdateQueueTaskItem, Medidata.Core.AsyncProcessing">
      <lifetime type="singleton" />
    </register>
    <register type="Medidata.Interfaces.AsyncProcessing.ISimpleQueue, Medidata.Interfaces"
                 mapTo="Medidata.Core.AsyncProcessing.BulkStatusUpdateQueue, Medidata.Core.AsyncProcessing">
      <lifetime type="singleton" />
    </register>

    <!-- TSDV -->

    <register type="Medidata.Interfaces.TSDV.IRunRetrospective, Medidata.Interfaces"
               mapTo="Medidata.Core.Objects.TSDV.RunRetrospective,  Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <!-- Logging -->
    <register type="Medidata.Interfaces.Logging.ILogManager, Medidata.Interfaces"
        mapTo="Medidata.Logging.LogManager, Medidata.Logging" >
      <constructor />
    </register>
    
    <!-- Coder -->
    <register type="Medidata.Core.Common.Interfaces.IRetry, Medidata.Core.Common"
          mapTo="Medidata.Core.Common.Utilities.Retry, Medidata.Core.Common">
    </register>

    <register type="Medidata.Core.Common.Interfaces.ISqlRetryHelper, Medidata.Core.Common"
          mapTo="Medidata.Core.Common.Utilities.SqlRetryHelper, Medidata.Core.Common">
      <lifetime type="singleton" />
    </register>

    <!--Proxy resolutions-->
    <register type="Medidata.Core.Objects.ProxyInterfaces.IRoleService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.RoleService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.RoleAction.IRoleActionService, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.ProxyImplementation.RoleAction.RoleActionService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.RoleAction.IRoleActionCacheService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.RoleAction.RoleActionCacheService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
  
    <register type="Medidata.Core.Objects.ProxyInterfaces.RoleAction.IRoleActionCreationService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.RoleAction.RoleActionCreationService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.RoleAction.IRoleActionAuditService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.RoleAction.RoleActionAuditService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.ICacheKeyCreationService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.CacheKeyCreationService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Caching.ICacheEngine, Medidata.Interfaces"
                mapTo="Medidata.Caching.ExpiringHashCacheEngine, Medidata.Caching" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Partitioning.IPartitionKeyService, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.ProxyImplementation.NonPartitionKeyService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.IVirtualRoleService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.VirtualRoleService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.ISystemRoleService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.SystemRoleService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.ProxyInterfaces.IRoleInitializationService, Medidata.Core.Objects"
                mapTo="Medidata.Core.Objects.ProxyImplementation.RoleInitializationService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <!-- Adapters -->
  
    <register type="Medidata.Data.IAgent, Medidata.Data"
              mapTo="Medidata.Data.Adapters.AgentAdapter, Medidata.Data">
      <lifetime type="singleton" />
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IRecordService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.RecordAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Adapters.IFormService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.FormAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>      
    </register>

    <register type="Medidata.Interfaces.Adapters.IProjectService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.ProjectAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Factories.ISavedMigrationPlanListFactory, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Factories.SavedMigrationPlanListFactory, Medidata.Core.Objects" >
      <lifetime type="singleton"/>      
    </register>

    <register type="Medidata.Interfaces.Adapters.IMigrationPlanService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.MigrationPlanAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
        
    <register type="Medidata.Interfaces.Adapters.IDataDictionaryEntryService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.DataDictionaryEntryAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IDataDictionaryService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.DataDictionaryAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IFieldService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.FieldAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IFolderService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.FolderAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IUnitDictionaryService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.UnitDictionaryAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IUnitDictionaryEntryService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.UnitDictionaryEntryAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IMigrationUtilService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.MigrationUtilAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.ICrfVersionAdapter, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.CrfVersionAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Adapters.IMatrixService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.MatrixAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
        
    <register type="Medidata.Interfaces.Adapters.IMigrationConfigurationService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.MigrationConfigurationAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.CRFMigrator.IMigrationChangeLogsService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.ProxyImplementation.MigrationChangeLogsService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
        
    <register type="Medidata.Interfaces.CRFMigrator.IMigrationReferenceMap, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.CRFMigrator.MigrationReferenceMap, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IDataPointService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.DataPointAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Factories.IDataPointsFactory, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.Factories.DataPointsFactory, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IStudyService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Services.StudyService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.IStudySiteService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Services.StudySiteService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Adapters.IDataPageService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Services.DataPageService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>
    
    <register type="Medidata.Interfaces.Adapters.ISubjectService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Services.SubjectService, Medidata.Core.Objects" >
        <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Adapters.ITimeService, Medidata.Interfaces"
          mapTo="Medidata.Core.Objects.Adapters.TimeAdapter, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Adapters.IObjectTypeService, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.Adapters.ObjectTypesAdapter, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.FileVersion.IFileVersionService, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.Adapters.FileVersionAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
    <register type="Medidata.Interfaces.Adapters.IDataObjectService, Medidata.Interfaces"
        mapTo="Medidata.Core.Objects.Adapters.DataObjectAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
    <!--Additional Interfaces-->
    <register type="Medidata.Interfaces.Caching.ICacheEngine, Medidata.Interfaces"
            mapTo="Medidata.Caching.ExpiringHashCacheEngine, Medidata.Caching">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Email.ISimpleEmail, Medidata.Interfaces"
            mapTo="Medidata.EmailService.EmailExport, Medidata.EmailService">
      <lifetime type="transient" />
    </register>

    <register type="Medidata.Interfaces.Email.ILoggedEmail, Medidata.Interfaces"
                mapTo="Medidata.EmailService.LoggedEmailExport, Medidata.EmailService">
      <lifetime type="transient" />
    </register>

    <register type="Medidata.Cloud.StateBroker.IStateService, Medidata.Cloud.StateBroker"
                 mapTo="Medidata.Cloud.StateBroker.StateService, Medidata.Cloud.StateBroker">
      <lifetime type="singleton" />
      <constructor />
    </register>

    <register type="Medidata.Interfaces.Medidata.Core.Objects.RollupSuppression.IRollupSuppressionManagerFactory, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.RollupSuppression.RollupSuppressionManagerFactory, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>
    <register type="Medidata.Interfaces.Medidata.Core.Objects.RollupSuppression.IRollupSuppressibleObjectTypesService, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.RollupSuppression.RollupSuppressibleObjectTypesService, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.DataAccess.IConnectionPersisterFactory, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.ConnectionPersisterFactory, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.DataAccess.ITransactionManager, Medidata.Interfaces"
               mapTo="Medidata.Data.TransactionManager, Medidata.Data">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.DataAccess.ITransactionManagerFactory, Medidata.Interfaces"
               mapTo="Medidata.Data.TransactionManagerFactory, Medidata.Data">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.AsyncProcessing.ITaskService, Medidata.Interfaces"
                mapTo="Medidata.Core.Common.Tasks.TaskService, Medidata.Core.Common">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.CRFMigrator.IExcelDifferenceService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.CRFMigrator.ExcelDifferenceService, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

     <register type="Medidata.Interfaces.Configuration.IConfiguration, Medidata.Interfaces"
                mapTo="Medidata.Core.Adapters.ConfigurationAdapter, Medidata.Core.Adapters" />
    
     <register type="Medidata.Interfaces.CRFMigrator.IMigrationPlanChangeLogFactory, Medidata.Interfaces"
                   mapTo="Medidata.Core.Objects.CRFMigrator.MigrationPlanChangeLogFactory, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Factories.ICustomFunctionEngineFactory, Medidata.Interfaces"
              mapTo="Medidata.Cloud.Programmability.CustomFunctions.CustomFunctionEngineFactory, Medidata.Cloud.Programmability.CustomFunctions" >
      <lifetime type ="singleton" />
    </register>

    <!-- Rollup -->
    <register type="Medidata.Interfaces.Configuration.IConfigurationManager, Medidata.Interfaces"
        mapTo="Medidata.Core.Adapters.ConfigurationManagerAdapter, Medidata.Core.Adapters" />

    <register type="Medidata.Interfaces.AsyncProcessing.IAsyncWaitService, Medidata.Interfaces"
              mapTo="Medidata.Core.Common.Tasks.AsyncWaitAdapter, Medidata.Core.Common">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.AsyncProcessing.ICancellationTokenSourceFactory, Medidata.Interfaces"
              mapTo="Medidata.Core.Common.Tasks.CancellationTokenSourceFactory, Medidata.Core.Common">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Adapters.IInstanceService, Medidata.Interfaces"
                  mapTo="Medidata.Core.Objects.Services.InstanceService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.IDataPointStatusCalculatorManagerFactory, Medidata.Core.Objects"
              mapTo="Medidata.Core.Objects.StatusRollup.DataPointStatusCalculatorManagerFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.IStatusCalculatorFactory, Medidata.Core.Objects"
              mapTo="Medidata.Core.Objects.StatusRollup.StatusCalculatorFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.IObjectStatusRepository, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.StatusRollup.ObjectStatusRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.IObjectStatusService, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.StatusRollup.ObjectStatusService, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Data.Factories.IObjectDataAdapterFactory, Medidata.Data"
           mapTo="Medidata.Data.Factories.ObjectDataAdapterFactory, Medidata.Data" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredProcessorFactory, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredProcessorFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredRollupQueueManager, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredRollupQueueManager, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredRollupRepository, Medidata.Core.Objects"
           mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredRollupRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredDTOBuilder, Medidata.Core.Objects"
               mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredDTOBuilder, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredRollupService, Medidata.Core.Objects"
           mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredRollupService, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IOverdueStatusProcessor, Medidata.Core.Objects"
       mapTo="Medidata.Core.Objects.StatusRollup.Deferred.OverdueStatusProcessor, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredRollupExecutor, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredRollupExecutor, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Repositories.Fetchers.ISubjectFetcher, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.Fetchers.SubjectFetcher, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Repositories.Fetchers.IInstanceFetcher, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.Fetchers.InstanceFetcher, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Repositories.Fetchers.IDataPageFetcher, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.Fetchers.DataPageFetcher, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

	<register type="Medidata.Core.Objects.TSDV.TSDVRunRetrospective.Interfaces.ITSDVRunRetrospectiveRepository, Medidata.Core.Objects"
          mapTo=" Medidata.Core.Objects.TSDVRunRetrospective.Repositories.TSDVRunRetrospectiveRepository, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
	<register type="Medidata.Core.Objects.TSDV.TSDVRunRetrospective.Interfaces.ITSDVRunRetrospectiveService, Medidata.Core.Objects"
          mapTo=" Medidata.Core.Objects.TSDVRunRetrospective.TSDVRunRetrospectiveService, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
	<register type="Medidata.Core.Objects.TSDV.TSDVRunRetrospective.Interfaces.ITSDVRunRetrospectiveProcessor, Medidata.Core.Objects"
          mapTo=" Medidata.Core.Objects.TSDV.TSDVRunRetrospective.TSDVRunRetrospectiveProcessor, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.ISubjectFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.SubjectFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IRecordFactory, Medidata.Core.Objects"
        mapTo="Medidata.Core.Objects.Factories.RecordFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IStudyFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.StudyFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IDataPointFactory, Medidata.Core.Objects"
        mapTo="Medidata.Core.Objects.Factories.DataPointFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IInstanceFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.InstanceFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IDataPageFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.DataPageFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.ISubjectCollectionFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.SubjectCollectionFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IStudySiteCollectionFactory, Medidata.Core.Objects"
        mapTo="Medidata.Core.Objects.Factories.StudySiteCollectionFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IStudyCollectionFactory, Medidata.Core.Objects"
        mapTo="Medidata.Core.Objects.Factories.StudyCollectionFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IInstanceCollectionFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.InstanceCollectionFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Factories.IDataPageCollectionFactory, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Factories.DataPageCollectionFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Adapters.IStudySiteService, Medidata.Interfaces"
                  mapTo="Medidata.Core.Objects.Services.StudySiteService, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Interfaces.Utilities.IEnvironment, Medidata.Interfaces"
                mapTo="Medidata.Core.Common.Utilities.EnvironmentService, Medidata.Core.Common" >
      <lifetime type ="singleton" />
    </register>

    <register type ="Medidata.Data.Materializer.IMaterializerFactory[], Medidata.Data"
      mapTo="Medidata.Data.Materializer.MaterializerFactory[], Medidata.Data">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.IObjectStatusCalculationProcessor, Medidata.Core.Objects"
            mapTo="Medidata.Core.Objects.StatusRollup.ObjectStatusCalculationProcessor, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <!--Core Object Repository-->
    <register type="Medidata.Core.Objects.Interfaces.Repositories.IDataPageRepository, Medidata.Core.Objects"
          mapTo="Medidata.Core.Objects.Repositories.DataPageRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IRecordRepository, Medidata.Core.Objects"
          mapTo="Medidata.Core.Objects.Repositories.RecordRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IDataPointRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.DataPointRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IInstanceRepository, Medidata.Core.Objects"
                 mapTo="Medidata.Core.Objects.Repositories.InstanceRepository, Medidata.Core.Objects" >
      <lifetime type="singleton"/>
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IStudySiteRepository, Medidata.Core.Objects"
        mapTo="Medidata.Core.Objects.Repositories.StudySiteRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IStudyRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.StudyRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.ISubjectRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.SubjectRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.StatusRollup.Deferred.IDeferredRollupStatusSaveBufferFactory, Medidata.Core.Objects"
       mapTo="Medidata.Core.Objects.StatusRollup.Deferred.DeferredRollupStatusSaveBufferFactory, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IProtocolDeviationRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.ProtocolDeviationRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IQueryRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.QueryRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.IDatabaseVerificationRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.DatabaseVerificationRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <!--Rollup Health Status-->
    <register type="Medidata.Core.Objects.StatusRollup.HealthStatus.IRollupHealthStatusRepository, Medidata.Core.Objects"
       mapTo="Medidata.Core.Objects.StatusRollup.HealthStatus.RollupHealthStatusRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
	
	<register type="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.IDotNetWhitelisterFactory, Medidata.Cloud.Programmability.CustomFunctions"
            mapTo="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.DotNetWhitelisterFactory, Medidata.Cloud.Programmability.CustomFunctions">
      <lifetime type="singleton" />
    </register>
	
    <register type="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.IUnsafeAPIList, Medidata.Cloud.Programmability.CustomFunctions"
            mapTo="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.UnsafeAPIList, Medidata.Cloud.Programmability.CustomFunctions">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.Programmability.ICustomFunctionParser, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.CustomFunctionParser, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Interfaces.Programmability.ICustomFunctionLegacyWhitelistChecker, Medidata.Interfaces"
      mapTo="Medidata.Cloud.Programmability.CustomFunctions.LegacyWhitelistChecker.XmlWhiteListChecker, Medidata.Cloud.Programmability.CustomFunctions" >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Interfaces.Programmability.IXmlWhitelistLocationProvider, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.CustomFunctionsNamespace.XmlWhitelistLocationProvider, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Interfaces.CleaningEngine.ICheckLogger, Medidata.Interfaces"
       mapTo="Medidata.Core.Objects.CleaningEngineParts.CheckLogger, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.SystemInformation.IEnvironment, Medidata.Interfaces"
      mapTo="Medidata.Core.Adapters.SystemEnvironmentAdapter, Medidata.Core.Adapters">
      <lifetime type="singleton" />
    </register>
    
    <!--Feature Block-->
    <register type="Medidata.Interfaces.BlockFeatures.IBlockFeaturesService, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.Services.BlockFeaturesService, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
	<register type="Medidata.Core.Objects.Interfaces.Repositories.IBlockedReportRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.BlockedReportRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Core.Objects.TSDV.Interfaces.Repositories.ITSDVAllocationTriggerRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.TSDV.Repositories.TSDVAllocationTriggerRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>

    <register type="Medidata.Interfaces.TSDV.ITSDVAllocationTriggerService, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.TSDV.TSDVAllocationTriggerService, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
    
    <register type="Medidata.Interfaces.TSDV.ITSDVConditionEvaluator, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.TSDV.TSDVConditionEvaluator, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
    
    <register type="Medidata.Core.Objects.Interfaces.Repositories.ICustomFunctionRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.CustomFunctionRepository, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
    <register type="Medidata.Interfaces.Caching.ICacheResetService, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.Adapters.CacheResetAdapter, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
    <register type="Medidata.Interfaces.Programmability.ICustomFunctionTypeCache, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.CustomFunctionsNamespace.CustomFunctionTypeCache, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
    <register type="Medidata.Interfaces.Programmability.ICustomFunctionCache, Medidata.Interfaces"
              mapTo="Medidata.Core.Objects.CustomFunctionsNamespace.CustomFunctionCache, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>
	
    <register type="Medidata.Interfaces.Programmability.ICustomFunctionCompiler, Medidata.Interfaces"
              mapTo="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.RoslynCustomFunctionCompiler, Medidata.Cloud.Programmability.CustomFunctions" >
      <lifetime type ="singleton" />
    </register>
	
    <register type="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.IRoslynHelper, Medidata.Cloud.Programmability.CustomFunctions"
            mapTo="Medidata.Cloud.Programmability.CustomFunctions.Roslyn.RoslynHelper, Medidata.Cloud.Programmability.CustomFunctions">
      <lifetime type="singleton" />
    </register>
	
	<register type="Medidata.Interfaces.Adapters.ICustomFunctionService, Medidata.Interfaces"
                mapTo="Medidata.Core.Objects.Adapters.CustomFunctionAdapter, Medidata.Core.Objects" >
      <lifetime type="singleton"/>      
    </register>

    <register type="Medidata.Interfaces.CleaningEngine.ICustomFunctionExecutor, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.CustomFunctionExecutor, Medidata.Core.Objects">
      <lifetime type="singleton" />
    </register>
	
	 <register type="Medidata.Interfaces.Clinical.ISubjectMatrixService, Medidata.Interfaces"
      mapTo="Medidata.Core.Objects.Services.SubjectMatrixService, Medidata.Core.Objects" >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.ISubjectMatrixRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.SubjectMatrixRepository, Medidata.Core.Objects " >
      <lifetime type ="singleton" />
    </register>

    <register type="Medidata.Core.Objects.Interfaces.Repositories.ILabQueueRepository, Medidata.Core.Objects"
      mapTo="Medidata.Core.Objects.Repositories.LabQueueRepository, Medidata.Core.Objects" >
      <lifetime type="singleton" />
    </register>
  </container>
</unity>
